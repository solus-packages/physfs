<PISI>
    <Source>
        <Name>physfs</Name>
        <Packager>
            <Name>Pierre-Yves</Name>
            <Email>pyu@riseup.net</Email>
        </Packager>
        <License>Zlib</License>
        <PartOf>programming.library</PartOf>
        <Summary xml:lang="en">PhysicsFS; a portable, flexible file i/o abstraction</Summary>
        <Description xml:lang="en">PhysicsFS is a library to provide abstract access to various archives. It is intended for use in video games, and the design was somewhat inspired by Quake 3&apos;s file subsystem. The programmer defines a &quot;write directory&quot; on the physical filesystem. No file writing done through the PhysicsFS API can leave that write directory, for security. For example, an embedded scripting language cannot write outside of this path if it uses PhysFS for all of its I/O, which means that untrusted scripts can run more safely. Symbolic links can be disabled as well, for added safety. For file reading, the programmer lists directories and archives that form a &quot;search path&quot;. Once the search path is defined, it becomes a single, transparent hierarchical filesystem. This makes for easy access to ZIP files in the same way as you access a file directly on the disk, and it makes it easy to ship a new archive that will override a previous archive on a per-file basis. Finally, PhysicsFS gives you platform-abstracted means to determine if CD-ROMs are available, the user&apos;s home directory, where in the real filesystem your program is running, etc.
</Description>
        <Archive type="binary" sha1sum="79eb0752a961b8e0d15c77d298c97498fbc89c5a">https://getsol.us/sources/README.Solus</Archive>
    </Source>
    <Package>
        <Name>physfs</Name>
        <Summary xml:lang="en">PhysicsFS; a portable, flexible file i/o abstraction</Summary>
        <Description xml:lang="en">PhysicsFS is a library to provide abstract access to various archives. It is intended for use in video games, and the design was somewhat inspired by Quake 3&apos;s file subsystem. The programmer defines a &quot;write directory&quot; on the physical filesystem. No file writing done through the PhysicsFS API can leave that write directory, for security. For example, an embedded scripting language cannot write outside of this path if it uses PhysFS for all of its I/O, which means that untrusted scripts can run more safely. Symbolic links can be disabled as well, for added safety. For file reading, the programmer lists directories and archives that form a &quot;search path&quot;. Once the search path is defined, it becomes a single, transparent hierarchical filesystem. This makes for easy access to ZIP files in the same way as you access a file directly on the disk, and it makes it easy to ship a new archive that will override a previous archive on a per-file basis. Finally, PhysicsFS gives you platform-abstracted means to determine if CD-ROMs are available, the user&apos;s home directory, where in the real filesystem your program is running, etc.
</Description>
        <PartOf>programming.library</PartOf>
        <Files>
            <Path fileType="executable">/usr/bin/test_physfs</Path>
            <Path fileType="library">/usr/lib/libphysfs.so.1</Path>
            <Path fileType="library">/usr/lib/libphysfs.so.3.0.2</Path>
        </Files>
    </Package>
    <Package>
        <Name>physfs-devel</Name>
        <Summary xml:lang="en">Development files for physfs</Summary>
        <Description xml:lang="en">PhysicsFS is a library to provide abstract access to various archives. It is intended for use in video games, and the design was somewhat inspired by Quake 3&apos;s file subsystem. The programmer defines a &quot;write directory&quot; on the physical filesystem. No file writing done through the PhysicsFS API can leave that write directory, for security. For example, an embedded scripting language cannot write outside of this path if it uses PhysFS for all of its I/O, which means that untrusted scripts can run more safely. Symbolic links can be disabled as well, for added safety. For file reading, the programmer lists directories and archives that form a &quot;search path&quot;. Once the search path is defined, it becomes a single, transparent hierarchical filesystem. This makes for easy access to ZIP files in the same way as you access a file directly on the disk, and it makes it easy to ship a new archive that will override a previous archive on a per-file basis. Finally, PhysicsFS gives you platform-abstracted means to determine if CD-ROMs are available, the user&apos;s home directory, where in the real filesystem your program is running, etc.
</Description>
        <PartOf>programming.devel</PartOf>
        <RuntimeDependencies>
            <Dependency release="4">physfs</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="header">/usr/include/physfs.h</Path>
            <Path fileType="library">/usr/lib/libphysfs.a</Path>
            <Path fileType="library">/usr/lib/libphysfs.so</Path>
            <Path fileType="data">/usr/lib/pkgconfig/physfs.pc</Path>
        </Files>
    </Package>
    <History>
        <Update release="4">
            <Date>2020-04-19</Date>
            <Version>3.0.2</Version>
            <Comment>Packaging update</Comment>
            <Name>Pierre-Yves</Name>
            <Email>pyu@riseup.net</Email>
        </Update>
    </History>
</PISI>